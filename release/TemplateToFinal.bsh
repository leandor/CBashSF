// This is a recorded macro. First, check over the
// commands to make sure this is what you intended. Then,
// save this buffer, and the macro should appear in the
// Macros menu.        

//ListX3 Level Macros
SearchAndReplace.setSearchString(" UINT8_FLAG_TYPE_LISTX3MACRO\\((.*?), (.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LISTX3($2, $3, $4, $5, c_ubyte)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_ARRAY_LISTX3MACRO\\((.*?), (.*?), (.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashUINT8ARRAY_LISTX3($2, $3, $4, $5, $6)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_ARRAY_LISTX3MACRO\\((.*?), (.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashUINT8ARRAY_LISTX3($2, $3, $4, $5)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" FLOAT32_LISTX3MACRO\\((.*?), (.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashFLOAT32_LISTX3($2, $3, $4, $5)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT32_TYPE_LISTX3MACRO\\((.*?), (.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LISTX3($2, $3, $4, $5, c_ulong)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UNKNOWN_OR_FORMID_OR_UINT32_LISTX3MACRO\\((.*?), (.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashUNKNOWN_OR_FORMID_OR_UINT32_LISTX3($2, $3, $4, $5)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

//ListX2 Level Macros
SearchAndReplace.setSearchString(" UINT8_LISTX2MACRO\\((.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LISTX2($2, $3, $4, c_ubyte)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" SINT8_LISTX2MACRO\\((.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LISTX2($2, $3, $4, c_byte)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT16_LISTX2MACRO\\((.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LISTX2($2, $3, $4, c_ushort)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" FLOAT32_LISTX2MACRO\\((.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashFLOAT32_LISTX2($2, $3, $4)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_ARRAY_LISTX2MACRO\\((.*?), (.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashUINT8ARRAY_LISTX2($2, $3, $4, $5)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_ARRAY_LISTX2MACRO\\((.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashUINT8ARRAY_LISTX2($2, $3, $4)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" FORMID_LISTX2MACRO\\((.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashFORMID_LISTX2($2, $3, $4)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_FLAG_LISTX2MACRO\\((.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LISTX2($2, $3, $4, c_ubyte)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_FLAG_TYPE_LISTX2MACRO\\((.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LISTX2($2, $3, $4, c_ubyte)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString("(.*?) LIST_LISTX2MACRO\\((.*?)(s|es|), (.*?), (.*?), (.*?), self\\.(.*?)(?!,)\\)");
SearchAndReplace.setReplaceString("$1 def create_$2(self):\n$1     length = CBash.GetFieldAttribute(self._CollectionID, self._ModID, self._RecordID, 0, $4, self._ListIndex, $5, self._ListX2Index, $6, 0, 0, 1)\n$1     CBash.SetField(self._CollectionID, self._ModID, self._RecordID, 0, $4, self._ListIndex, $5, self._ListX2Index, $6, 0, 0, 0, c_ulong(length + 1))\n$1     return self.$7(self._CollectionID, self._ModID, self._RecordID, $4, self._ListIndex, $5, self._ListX2Index, $6, length)\n$1 $2$3 = CBashLIST_LISTX2($4, $5, $6, $7)\n$1 $2$3_list = CBashLIST_LISTX2($4, $5, $6, $7, True)\n");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString("(.*?) LIST_LISTX2MACRO\\((.*?)(s|es|), (.*?), (.*?), (.*?), (.*?)(?!,)\\)");
SearchAndReplace.setReplaceString("$1 def create_$2(self):\n$1     length = CBash.GetFieldAttribute(self._CollectionID, self._ModID, self._RecordID, 0, $4, self._ListIndex, $5, self._ListX2Index, $6, 0, 0, 1)\n$1     CBash.SetField(self._CollectionID, self._ModID, self._RecordID, 0, $4, self._ListIndex, $5, self._ListX2Index, $6, 0, 0, 0, c_ulong(length + 1))\n$1     return $7(self._CollectionID, self._ModID, self._RecordID, $4, self._ListIndex, $5, self._ListX2Index, $6, length)\n$1 $2$3 = CBashLIST_LISTX2($4, $5, $6, $7)\n$1 $2$3_list = CBashLIST_LISTX2($4, $5, $6, $7, True)\n");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" STRING_LISTX2MACRO\\((.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashSTRING_LISTX2($2, $3, $4)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT32_LISTX2MACRO\\((.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LISTX2($2, $3, $4, c_ulong)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" ISTRING_LISTX2MACRO\\((.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashISTRING_LISTX2($2, $3, $4)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UNKNOWN_OR_FORMID_OR_UINT32_LISTX2MACRO\\((.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashUNKNOWN_OR_FORMID_OR_UINT32_LISTX2($2, $3, $4)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_ARRAY_LISTX2MACRO\\((.*?), (.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashUINT8ARRAY_LISTX2($2, $3, $4, $5)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" FORMID_OR_UINT32_ARRAY_LISTX2MACRO\\((.*?), (.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashFORMID_OR_UINT32_ARRAY_LISTX2($2, $3, $4, $5)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" FORMID_OR_UINT32_ARRAY_LISTX2MACRO\\((.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashFORMID_OR_UINT32_ARRAY_LISTX2($2, $3, $4)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT32_FLAG_LISTX2MACRO\\((.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LISTX2($2, $3, $4, c_ulong)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT32_TYPE_LISTX2MACRO\\((.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LISTX2($2, $3, $4, c_ulong)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

//ListX1 Level Macros
SearchAndReplace.setSearchString("(.*?) LIST_LISTMACRO\\((.*?)(s|es|), (.*?), (.*?), self\\.(.*?)(?!,)\\)");
SearchAndReplace.setReplaceString("$1 def create_$2(self):\n$1     length = CBash.GetFieldAttribute(self._CollectionID, self._ModID, self._RecordID, 0, $4, self._ListIndex, $5, 0, 0, 0, 0, 1)\n$1     CBash.SetField(self._CollectionID, self._ModID, self._RecordID, 0, $4, self._ListIndex, $5, 0, 0, 0, 0, 0, c_ulong(length + 1))\n$1     return self.$6(self._CollectionID, self._ModID, self._RecordID, $4, self._ListIndex, $5, length)\n$1 $2$3 = CBashLIST_LIST($5, $6)\n$1 $2$3_list = CBashLIST_LIST($5, $6, True)\n");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(true);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString("(.*?) LIST_LISTMACRO\\((.*?)(s|es|), (.*?), (.*?), (.*?)(?!,)\\)");
SearchAndReplace.setReplaceString("$1 def create_$2(self):\n$1     length = CBash.GetFieldAttribute(self._CollectionID, self._ModID, self._RecordID, 0, $4, self._ListIndex, $5, 0, 0, 0, 0, 1)\n$1     CBash.SetField(self._CollectionID, self._ModID, self._RecordID, 0, $4, self._ListIndex, $5, 0, 0, 0, 0, 0, c_ulong(length + 1))\n$1     return $6(self._CollectionID, self._ModID, self._RecordID, $4, self._ListIndex, $5, length)\n$1 $2$3 = CBashLIST_LIST($5, $6)\n$1 $2$3_list = CBashLIST_LIST($5, $6, True)\n");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(true);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" ISTRING_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashISTRING_LIST($3)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMEISTRING_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashISTRING_LIST($3) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" STRING_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashSTRING_LIST($3)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMESTRING_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashSTRING_LIST($3) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" FLOAT32_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashFLOAT32_LIST($3)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMEFLOAT32_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashFLOAT32_LIST($3) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT32_ARRAY_LISTMACRO\\((.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashUINT32ARRAY_LIST($3, $4)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT32_ARRAY_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashUINT32ARRAY_LIST($3)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_ARRAY_LISTMACRO\\((.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashUINT8ARRAY_LIST($3, $4)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMEUINT8_ARRAY_LISTMACRO\\((.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashUINT8ARRAY_LIST($3, $4) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_ARRAY_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashUINT8ARRAY_LIST($3)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMEUINT8_ARRAY_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashUINT8ARRAY_LIST($3) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" FORMID_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashFORMID_LIST($3)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" FORMID_ARRAY_LISTMACRO\\((.*?), (.*?), (.*?)(?!,)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashFORMIDARRAY_LIST($3)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UNKNOWN_OR_FORMID_OR_UINT32_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashUNKNOWN_OR_FORMID_OR_UINT32_LIST($3)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" MGEFCODE_OR_UINT32_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashMGEFCODE_OR_UINT32_LIST($3)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMEMGEFCODE_OR_UINT32_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashMGEFCODE_OR_UINT32_LIST($3) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" ACTORVALUE_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashACTORVALUE_LIST($3)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMEACTORVALUE_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashACTORVALUE_LIST($3) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" FORMID_OR_MGEFCODE_OR_ACTORVALUE_OR_UINT32_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashFORMID_OR_MGEFCODE_OR_ACTORVALUE_OR_UINT32_LIST($3)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMEFORMID_OR_MGEFCODE_OR_ACTORVALUE_OR_UINT32_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashFORMID_OR_MGEFCODE_OR_ACTORVALUE_OR_UINT32_LIST($3) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT32_FLAG_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LIST($3, c_ulong)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMEUINT32_FLAG_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LIST($3, c_ulong) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT16_FLAG_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LIST($3, c_ushort)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_FLAG_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LIST($3, c_ubyte)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" SINT32_FLAG_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LIST($3, c_long)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" SINT16_FLAG_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LIST($3, c_short)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" SINT8_FLAG_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LIST($3, c_byte)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT32_TYPE_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LIST($3, c_ulong)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT16_TYPE_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LIST($3, c_ushort)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_TYPE_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LIST($3, c_ubyte)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" SINT32_TYPE_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LIST($3, c_long)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" SINT16_TYPE_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LIST($3, c_short)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" SINT8_TYPE_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LIST($3, c_byte)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT32_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LIST($3, c_ulong)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT16_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LIST($3, c_ushort)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LIST($3, c_ubyte)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_FLAG_TYPE_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LIST($3, c_ubyte)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMEUINT8_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LIST($3, c_ubyte) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" SINT32_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LIST($3, c_long)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" SINT16_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LIST($3, c_short)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" SINT8_LISTMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_LIST($3, c_byte)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

//Top Level Macros
SearchAndReplace.setSearchString("( *) SUBRECORD_MACRO\\((.*?), (.*?), (.*?), (.*?), (.*?)(?!,)\\)");
SearchAndReplace.setReplaceString("$1 def create_$2(self):\n$1     FID = CBash.CreateRecord(self._CollectionID, self._ModID, cast($3, POINTER(c_ulong)).contents.value, 0, 0, self._RecordID, $6)\n$1     if(FID): return $5(self._CollectionID, self._ModID, FID, self._RecordID, $6)\n$1     return None\n$1 $2 = CBashSUBRECORD($4, $5, $3, $6)\n");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString("( *) SUBRECORD_ARRAY_MACRO\\((.*?), (.*?), (.*?), (.*?), (.*?)(?!,)\\)");
SearchAndReplace.setReplaceString("$1 def create_$2(self):\n$1     FID = CBash.CreateRecord(self._CollectionID, self._ModID, cast($3, POINTER(c_ulong)).contents.value, 0, 0, self._RecordID, $6)\n$1     if(FID): return $5(self._CollectionID, self._ModID, FID, self._RecordID, $6)\n$1     return None\n$1 $2 = CBashSUBRECORDARRAY($4, $5, $3, $6)\n");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString("( *) XSED_MACRO\\((.*?), (.*?)(?!,)\\)");
SearchAndReplace.setReplaceString("$1 $2 = CBashXSED($3)\n$1 $2_as_offset = CBashXSED($3, True)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString("(.*?) LIST_MACRO\\((.*?)(s|es|), (.*?), self\\.(.*?)(?!,)\\)");
SearchAndReplace.setReplaceString("$1 def create_$2(self):\n$1     length = CBash.GetFieldAttribute(self._CollectionID, self._ModID, self._RecordID, 0, $4, 0, 0, 0, 0, 0, 0, 1)\n$1     CBash.SetField(self._CollectionID, self._ModID, self._RecordID, 0, $4, 0, 0, 0, 0, 0, 0, 0, c_ulong(length + 1))\n$1     return self.$5(self._CollectionID, self._ModID, self._RecordID, $4, length)\n$1 $2$3 = CBashLIST($4, $5)\n$1 $2$3_list = CBashLIST($4, $5, True)\n");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(true);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString("(.*?) LIST_MACRO\\((.*?)(s|es|), (.*?), (.*?)(?!,)\\)");
SearchAndReplace.setReplaceString("$1 def create_$2(self):\n$1     length = CBash.GetFieldAttribute(self._CollectionID, self._ModID, self._RecordID, 0, $4, 0, 0, 0, 0, 0, 0, 1)\n$1     CBash.SetField(self._CollectionID, self._ModID, self._RecordID, 0, $4, 0, 0, 0, 0, 0, 0, 0, c_ulong(length + 1))\n$1     return $5(self._CollectionID, self._ModID, self._RecordID, $4, length)\n$1 $2$3 = CBashLIST($4, $5)\n$1 $2$3_list = CBashLIST($4, $5, True)\n");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(true);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" SINT32_OR_UNKNOWN_MACRO\\((.*?), (.*?)(?!,)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashSINT32_OR_UNKNOWN($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" BasicAliasMACRO\\((.*?), (.*?)(?!,)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashAlias(\'$2\')");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(true);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" GroupedValuesMACRO\\((.*?), (.*?), (.*?)(?!,)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGrouped($2, $3)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(true);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString("( *) RADIAN_MACRO\\((.*?), (.*?)(?!,)\\)");
SearchAndReplace.setReplaceString("$1 $2 = CBashFLOAT32($3)\n$1 $2_degrees = CBashDEGREES($3)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" JUNK_MACRO\\((.*?), (.*?)(?!,)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashJunk($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" ISTRING_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashISTRING($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" ISTRING_ARRAY_MACRO\\((.*?), (.*?)(?!,)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashISTRINGARRAY($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" STRING_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashSTRING($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" FLOAT32_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashFLOAT32($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_ARRAY_MACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashUINT8ARRAY($2, $3)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMEUINT8_ARRAY_MACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashUINT8ARRAY($2, $3) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_ARRAY_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashUINT8ARRAY($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMEUINT8_ARRAY_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashUINT8ARRAY($2) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" FORMID_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashFORMID($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" FORMID_OR_UINT32_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashFORMID_OR_UINT32($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" FORMID_OR_UINT32_ARRAY_MACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashFORMID_OR_UINT32_ARRAY($2, $3)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" FORMID_OR_UINT32_ARRAY_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashFORMID_OR_UINT32_ARRAY($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" MGEFCODE_OR_UINT32_ARRAY_MACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashMGEFCODE_OR_UINT32_ARRAY($2, $3)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" MGEFCODE_OR_UINT32_ARRAY_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashMGEFCODE_OR_UINT32_ARRAY($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMEMGEFCODE_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashMGEFCODE($2) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" FORMID_ARRAY_MACRO\\((.*?), (.*?)(?!,)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashFORMIDARRAY($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT32_FLAG_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_ulong)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMEUINT32_FLAG_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_ulong) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT16_FLAG_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_ushort)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_FLAG_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_ubyte)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" SINT32_FLAG_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_long)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" SINT16_FLAG_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_short)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" SINT8_FLAG_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_byte)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" BasicTypeMACRO\\((.*?), (.*?), (.*?), (.*?)(?!,)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashBasicType(\'$2\', $3, \'$4\')");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" MaskedTypeMACRO\\((.*?), (.*?), (.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashMaskedType(\'$2\', $3, $4, \'$5\')");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT32_TYPE_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_ulong)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT16_TYPE_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_ushort)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_TYPE_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_ubyte)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_FLAG_TYPE_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_ubyte)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" SINT32_TYPE_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_long)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" SINT16_TYPE_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_short)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" SINT8_TYPE_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_byte)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT32_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_ulong)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMEUINT32_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_ulong) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT32_ARRAY_MACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashUINT32ARRAY($2, $3)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT32_ARRAY_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashUINT32ARRAY($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT16_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_ushort)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_ubyte)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMEUINT8_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_ubyte) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" SINT32_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_long)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" SINT16_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_short)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" SINT8_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_byte)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" CHAR_MACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric($2, c_char)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" BasicFlagMACRO\\((.*?), (.*?), (.*?)(?!,)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashBasicFlag(\'$2\', $3)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMEBasicFlagMACRO\\((.*?), (.*?), (.*?)(?!,)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashBasicFlag(\'$2\', $3) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" BasicInvertedFlagMACRO\\((.*?), (.*?)(?!,)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashInvertedFlag(\'$2\')");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString("( *) ObModEDIDRecordsMACRO\\((.*?)\\)");
SearchAndReplace.setReplaceString("$1 def create_$2(self, RecordID):\n$1     if(CBash.CreateRecord(self._CollectionID, self._ModID, cast(\"$2\", POINTER(c_ulong)).contents.value, 0, RecordID, 0, 0)):\n$1         return Ob$2Record(self._CollectionID, self._ModID, RecordID, 0, 0)\n$1     return None\n$1 $2 = CBashEDIDRECORDARRAY(Ob$2Record, \'$2\', 0)\n");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString("( *) ObModRecordsMACRO\\((.*?)\\)");
SearchAndReplace.setReplaceString("$1 def create_$2(self):\n$1     RecordID = CBash.CreateRecord(self._CollectionID, self._ModID, cast(\"$2\", POINTER(c_ulong)).contents.value, 0, 0, 0, 0)\n$1     if(RecordID): return Ob$2Record(self._CollectionID, self._ModID, RecordID, 0, 0)\n$1     return None\n$1 $2 = CBashRECORDARRAY(Ob$2Record, \'$2\', 0)\n");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString("( *)(.*?) = CBash(.*?)\\(self\\._FieldID, (.*?)\\)");
SearchAndReplace.setReplaceString("$1self.$2 = CBash$3(self._FieldID, $4)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(true);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT32_FLAG_EDIDMACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashEDIDGeneric($2, c_ulong)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" FORMID_EDIDMACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashEDIDFORMID($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" STRING_EDIDMACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashEDIDSTRING($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" ISTRING_EDIDMACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashEDIDISTRING($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" FLOAT32_EDIDMACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashEDIDFLOAT32($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_ARRAY_EDIDMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashEDIDUINT8ARRAY($2, $3)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_ARRAY_EDIDMACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashEDIDUINT8ARRAY($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" SINT32_EDIDMACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashEDIDGeneric($2, c_long)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT32_EDIDMACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashEDIDGeneric($2, c_ulong)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT16_EDIDMACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashEDIDGeneric($2, c_ushort)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" MGEFCODE_OR_UINT32_ARRAY_EDIDMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashEDIDMGEFCODE_OR_UINT32_ARRAY($2, $3)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" MGEFCODE_OR_UINT32_ARRAY_EDIDMACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashEDIDMGEFCODE_OR_UINT32_ARRAY($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMEUINT8_EDIDMACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashEDIDGeneric($2, c_ubyte) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMEUINT8_ARRAY_EDIDMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashEDIDUINT8ARRAY($2, $3) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMEUINT8_ARRAY_EDIDMACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashEDIDUINT8ARRAY($2) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMEMGEFCODE_EDIDMACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashEDIDMGEFCODE($2) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMEUINT32_EDIDMACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashEDIDGeneric($2, c_ulong) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" OBMEUINT32_FLAG_EDIDMACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashEDIDGeneric($2, c_ulong) #OBME");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

//Grouped
SearchAndReplace.setSearchString(" UINT8_GROUPEDMACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashGeneric_GROUP($2, c_ubyte)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" STRING_GROUPEDMACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashSTRING_GROUP($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" ISTRING_GROUPEDMACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashISTRING_GROUP($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" FLOAT32_GROUPEDMACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashFLOAT32_GROUP($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_ARRAY_GROUPEDMACRO\\((.*?), (.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashUINT8ARRAY_GROUP($2, $3)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString(" UINT8_ARRAY_GROUPEDMACRO\\((.*?), (.*?)\\)");
SearchAndReplace.setReplaceString(" $1 = CBashUINT8ARRAY_GROUP($2)");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(false);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString("create_entri");
SearchAndReplace.setReplaceString("create_entry");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(true);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString("create_stag");
SearchAndReplace.setReplaceString("create_stage");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(true);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString("create_respons");
SearchAndReplace.setReplaceString("create_response");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(true);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString("create_opaciti");
SearchAndReplace.setReplaceString("create_opacity");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(true);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString("create_baseTextur");
SearchAndReplace.setReplaceString("create_baseTextures");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(true);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);

SearchAndReplace.setSearchString("create_vertexTextur");
SearchAndReplace.setReplaceString("create_vertexTextures");
SearchAndReplace.setBeanShellReplace(false);
SearchAndReplace.setIgnoreCase(true);
SearchAndReplace.setRegexp(true);
SearchAndReplace.setSearchFileSet(new CurrentBufferSet());
SearchAndReplace.replaceAll(view);
